from pathlib import Path
from telegram import Update
from utils.stats import load_stats
from telegram.ext import ContextTypes
from telegram.constants import ParseMode


from utils.decorators import admin_only


VERSION = "1.1.1"

# === –ö–æ–º–∞–Ω–¥–∞ /stats ‚Äî –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–æ—Ç—É ===
@admin_only
async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        stats = load_stats()
        total = stats.get("total_visits", 0)
        recent = len(stats.get("last_users", []))
        msg = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Äî –í—Å–µ–≥–æ –≤–∏–∑–∏—Ç–æ–≤: <b>{total}</b>\n"
            f"‚Äî –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: <b>{recent}</b>"
        )
        await update.message.reply_text(msg, parse_mode=ParseMode.HTML)
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

# === –ö–æ–º–∞–Ω–¥–∞ /last_users ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ===
@admin_only
async def last_users_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        stats = load_stats()
        users = stats.get("last_users", [])
        if not users:
            await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return

        msg = "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
        for u in users:
            name = f"@{u['username']}" if u['username'] else f"ID {u['user_id']}"
            msg += f"‚Ä¢ {name} ‚Äî {u['action']} ({u['time'][:19]})\n"

        await update.message.reply_text(msg, parse_mode=ParseMode.HTML)
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

# === –ö–æ–º–∞–Ω–¥–∞ /log ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥-—Ñ–∞–π–ª–∞ ===
@admin_only
async def log_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        log_path = Path("logs/user_activity.log")
        if log_path.exists():
            await update.message.reply_document(document=log_path.open("rb"))
        else:
            await update.message.reply_text("üì≠ –õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞: {e}")

# === –ö–æ–º–∞–Ω–¥–∞ /version ‚Äî –≤—ã–≤–æ–¥ –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞ ===
@admin_only
async def version_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.reply_text(f"üõ† –í–µ—Ä—Å–∏—è –±–æ—Ç–∞: {VERSION}")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –≤–µ—Ä—Å–∏–∏: {e}")
