import asyncio
from telegram.ext import ContextTypes
from datetime import datetime, timedelta
from utils.google_sheets import get_sheet_data
from bot.messages import format_block, format_all_blocks, format_new_offer_blocks, format_expired_offer_blocks

# === –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ ===
async def send_long(bot, chat_id, text, parse_mode="HTML"):
    """
    –î–µ–ª–∏—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –ø–æ —á–∞—Å—Ç—è–º.
    """
    MAX_LENGTH = 4096
    for i in range(0, len(text), MAX_LENGTH):
        await bot.send_message(chat_id=chat_id, text=text[i:i+MAX_LENGTH], parse_mode=parse_mode)


# === –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –±–ª–æ–∫–æ–≤ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º ===
async def send_combined_blocks(bot, chat_id, blocks, header):
    """
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –±–ª–æ–∫–∏ –¥–æ –ª–∏–º–∏—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º.
    """
    combined = header
    messages = []

    for block in blocks:
        if len(combined) + len(block) < 4096:
            combined += block
        else:
            messages.append(combined)
            combined = block
    messages.append(combined)

    await asyncio.sleep(1)  # –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ Telegram API
    for i, msg in enumerate(messages):
        await send_long(bot, chat_id, msg if i == 0 else msg.replace(header, ""))


# === –ê–∫—Ü–∏–∏: –°–Ω–µ–∫–∏ ===
async def send_sneki_full(bot, chat_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –∞–∫—Ü–∏–∏ –∏–∑ –ª–∏—Å—Ç–∞ "–ê–∫—Ü–∏–∏ –°–Ω–µ–∫–∏"
    """
    try:
        rows = get_sheet_data("–ê–∫—Ü–∏–∏ –°–Ω–µ–∫–∏")
        blocks = format_all_blocks(rows, skip_rows=2)
        await send_combined_blocks(bot, chat_id, blocks, "üßæ –ê–∫—Ü–∏—è: –°–Ω–µ–∫–∏\n")
    except Exception as e:
        await bot.send_message(chat_id=chat_id, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫—Ü–∏–π –°–Ω–µ–∫–∏: {e}")


# === –ê–∫—Ü–∏–∏: –ù–∞–ø–∏—Ç–∫–∏ ===
async def send_drinks_full(bot, chat_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –∞–∫—Ü–∏–∏ –∏–∑ –ª–∏—Å—Ç–∞ "–ê–∫—Ü–∏–∏ –ù–∞–ø–∏—Ç–∫–∏"
    """
    try:
        rows = get_sheet_data("–ê–∫—Ü–∏–∏ –ù–∞–ø–∏—Ç–∫–∏")
        blocks = format_all_blocks(rows, skip_rows=1)
        await send_combined_blocks(bot, chat_id, blocks, "ü•§ –ê–∫—Ü–∏—è: –ù–∞–ø–∏—Ç–∫–∏\n")
    except Exception as e:
        await bot.send_message(chat_id=chat_id, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫—Ü–∏–π –ù–∞–ø–∏—Ç–∫–∏: {e}")

def parse_end_date(period_str):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞
        _, end_str = period_str.split('-')
        end_str = end_str.strip()
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å –≥–æ–¥–æ–º –∏ –±–µ–∑
        for fmt in ("%d.%m.%y", "%d.%m.%Y", "%d.%m"):
            try:
                parsed = datetime.strptime(end_str, fmt).date()
                # –ï—Å–ª–∏ –≥–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –¥–æ–±–∞–≤–∏–º —Ç–µ–∫—É—â–∏–π
                if fmt == "%d.%m":
                    parsed = parsed.replace(year=datetime.now().year)
                return parsed
            except:
                continue
        return None
    except:
        return None
# === –§—É–Ω–∫—Ü–∏—è: –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ ===
def is_starting_today(period_str, today):
    try:
        start_str = period_str.split('-')[0].strip()
        if len(start_str.split('.')) == 3:
            start_date = datetime.strptime(start_str, '%d.%m.%y')
        else:
            start_date = datetime.strptime(start_str, '%d.%m')
            start_date = start_date.replace(year=today.year)
        return start_date.date() == today
    except:
        return False
        
# === –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –∞–∫—Ü–∏–π (–ø–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–µ –Ω–∞—á–∞–ª–∞) ===
def filter_today_blocks(rows, skip_rows=1):
    today = datetime.now().date()
    blocks = []
    current_block = []

    def parse_start_date(row):
        try:
            period = row[1] if len(row) > 1 else ""
            start_str = period.split("-")[0].strip()
            today = datetime.now().date()
            for fmt in ("%d.%m", "%d.%m.%y", "%d.%m.%Y"):
                try:
                    parsed = datetime.strptime(start_str, fmt).date()
                    # –ï—Å–ª–∏ –≥–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω, —Å—Ç–∞–≤–∏–º —Ç–µ–∫—É—â–∏–π
                    if fmt == "%d.%m":
                        parsed = parsed.replace(year=today.year)
                    return parsed
                except:
                    continue
            return None
        except:
            return None

    for row in rows[skip_rows:]:
        if not any(cell.strip() for cell in row):
            if current_block:
                main_row = current_block[0]
                start_date = parse_start_date(main_row)
                if start_date == today:
                    blocks.append(current_block)
                current_block = []
        else:
            current_block.append(row)

    if current_block:
        main_row = current_block[0]
        start_date = parse_start_date(main_row)
        if start_date == today:
            blocks.append(current_block)

    return [format_block(b) for b in blocks]


# === –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö –∞–∫—Ü–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ===
async def send_today_offers(bot, chat_id):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –∞–∫—Ü–∏–∏, –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º –¥–Ω—ë–º.
    –ö–∞–∂–¥–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º.
    """
    categories = [
        ("–ê–∫—Ü–∏–∏ –ê—Ä–æ–º–∫–∏", 2, "üíßüí® –ù–æ–≤—ã–µ –∞–∫—Ü–∏–∏: –ê—Ä–æ–º–∫–∏"),
        ("–ê–∫—Ü–∏–∏ –°–Ω–µ–∫–∏", 2, "ü•° –ù–æ–≤—ã–µ –∞–∫—Ü–∏–∏: –°–Ω–µ–∫–∏"),
        ("–ê–∫—Ü–∏–∏ –ù–∞–ø–∏—Ç–∫–∏", 1, "ü•§ –ù–æ–≤—ã–µ –∞–∫—Ü–∏–∏: –ù–∞–ø–∏—Ç–∫–∏")
    ]

    any_found = False

    try:
        for sheet_name, skip_rows, header in categories:
            rows = get_sheet_data(sheet_name)
            filtered_blocks = filter_today_blocks(rows, skip_rows=skip_rows)

            if filtered_blocks:
                any_found = True
                await send_combined_blocks(bot, chat_id, filtered_blocks, header)

        if not any_found:
            await bot.send_message(chat_id=chat_id, text="üìú –ù–æ–≤—ã—Ö –∞–∫—Ü–∏–π –Ω–µ—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
    except Exception as e:
        await bot.send_message(chat_id=chat_id, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∞–∫—Ü–∏–π: {e}")



# === –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π (–≤—á–µ—Ä–∞—à–Ω—è—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è) ===
def filter_expired_blocks(rows, reference_date: datetime.date, skip_rows=1):
    blocks = []
    current_block = []

    for row in rows[skip_rows:]:
        if not any(cell.strip() for cell in row):
            if current_block:
                main_row = current_block[0]
                if len(main_row) > 1:
                    end_date = parse_end_date(main_row[1])
                    if end_date and end_date == (reference_date - timedelta(days=1)):
                        blocks.append(current_block)
                current_block = []
        else:
            current_block.append(row)

    if current_block:
        main_row = current_block[0]
        if len(main_row) > 1:
            end_date = parse_end_date(main_row[1])
            if end_date and end_date == (reference_date - timedelta(days=1)):
                blocks.append(current_block)

    return [format_block(b) for b in blocks]


# === –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π (–≤—á–µ—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å) ===
# === –í—ã–≤–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π (—Å —É—á—ë—Ç–æ–º –¥–∞—Ç—ã, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞)
async def send_expired_offers(bot, chat_id, reference_date=None):
    if reference_date is None:
        reference_date = datetime.now().date()

    categories = [
        ("–ê–∫—Ü–∏–∏ –ê—Ä–æ–º–∫–∏", 2, "üíßüí® –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏: –ê—Ä–æ–º–∫–∏"),
        ("–ê–∫—Ü–∏–∏ –°–Ω–µ–∫–∏", 2, "ü•° –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏: –°–Ω–µ–∫–∏"),
        ("–ê–∫—Ü–∏–∏ –ù–∞–ø–∏—Ç–∫–∏", 1, "ü•§ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏: –ù–∞–ø–∏—Ç–∫–∏")
    ]

    any_found = False

    for sheet_name, skip, header in categories:
        rows = get_sheet_data(sheet_name)
        filtered = filter_expired_blocks(rows, reference_date, skip_rows=skip)
        if filtered:
            any_found = True
            await send_combined_blocks(bot, chat_id, filtered, header)

    if not any_found:
        await bot.send_message(chat_id=chat_id, text="‚úÖ –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –≤—Å–µ –∞–∫—Ü–∏–∏ –µ—â—ë –¥–µ–π—Å—Ç–≤—É—é—Ç.")



def filter_blocks_by_start_date(rows, target_date, skip_rows=1):
    blocks = []
    current_block = []

    def parse_date(date_str):
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç datetime.date
        """
        for fmt in ("%d.%m", "%d.%m.%y", "%d.%m.%Y"):
            try:
                dt = datetime.strptime(date_str, fmt)
                if fmt == "%d.%m":
                    dt = dt.replace(year=datetime.now().year)
                return dt.date()
            except:
                continue
        return None

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤–≤–µ–¥—ë–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∞—Ç—É
    target_date_obj = parse_date(target_date)
    if not target_date_obj:
        return []

    def parse_start_date(period_str):
        try:
            start_str = period_str.split("-")[0].strip()
            return parse_date(start_str)
        except:
            return None

    for row in rows[skip_rows:]:
        if not any(cell.strip() for cell in row):
            if current_block:
                main_row = current_block[0]
                if len(main_row) > 1:
                    start_date = parse_start_date(main_row[1])
                    if start_date == target_date_obj:
                        blocks.append(current_block)
                current_block = []
        else:
            current_block.append(row)

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–ª–æ–∫–∞
    if current_block:
        main_row = current_block[0]
        if len(main_row) > 1:
            start_date = parse_start_date(main_row[1])
            if start_date == target_date_obj:
                blocks.append(current_block)

    return [format_block(b) for b in blocks]

def filter_blocks_by_end_date(rows, target_date, skip_rows=1):
    blocks = []
    current_block = []

    try:
        target_date_obj = datetime.strptime(target_date, "%d.%m").date()
    except ValueError:
        return []

    def parse_end_date(period_str):
        try:
            _, end_str = period_str.split('-')
            end_date = datetime.strptime(end_str.strip(), "%d.%m").date()
            return end_date.replace(year=target_date_obj.year)
        except:
            return None

    for row in rows[skip_rows:]:
        if not any(cell.strip() for cell in row):
            if current_block:
                main_row = current_block[0]
                if len(main_row) > 1:
                    end_date = parse_end_date(main_row[1])
                    if end_date == (target_date_obj - timedelta(days=1)):
                        blocks.append(current_block)
                current_block = []
        else:
            current_block.append(row)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–ª–æ–∫–∞
    if current_block:
        main_row = current_block[0]
        if len(main_row) > 1:
            end_date = parse_end_date(main_row[1])
            if end_date == (target_date_obj - timedelta(days=1)):
                blocks.append(current_block)

    return [format_block(b) for b in blocks]


async def send_new_offers_by_date(bot, chat_id, target_date):
    categories = [
        ("–ê–∫—Ü–∏–∏ –ê—Ä–æ–º–∫–∏", 2, "üíßüí® –ù–æ–≤—ã–µ –∞–∫—Ü–∏–∏: –ê—Ä–æ–º–∫–∏"),
        ("–ê–∫—Ü–∏–∏ –°–Ω–µ–∫–∏", 2, "ü•° –ù–æ–≤—ã–µ –∞–∫—Ü–∏–∏: –°–Ω–µ–∫–∏"),
        ("–ê–∫—Ü–∏–∏ –ù–∞–ø–∏—Ç–∫–∏", 1, "ü•§ –ù–æ–≤—ã–µ –∞–∫—Ü–∏–∏: –ù–∞–ø–∏—Ç–∫–∏")
    ]
    any_found = False
    for name, skip, header in categories:
        rows = get_sheet_data(name)
        filtered = filter_blocks_by_start_date(rows, target_date, skip_rows=skip)
        if filtered:
            any_found = True
            await send_combined_blocks(bot, chat_id, filtered, header)

    if not any_found:
        await bot.send_message(chat_id=chat_id, text="üì≠ –ù–æ–≤—ã—Ö –∞–∫—Ü–∏–π –Ω–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç.")

async def send_expired_offers_by_date(bot, chat_id, target_date_str):
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç —Å —É—á—ë—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–æ–≤
        for fmt in ("%d.%m.%Y", "%d.%m.%y", "%d.%m"):
            try:
                reference_date = datetime.strptime(target_date_str, fmt).date()
                if fmt == "%d.%m":
                    reference_date = reference_date.replace(year=datetime.now().year)
                break
            except:
                continue
        else:
            await bot.send_message(chat_id=chat_id, text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú")
            return

        categories = [
            ("–ê–∫—Ü–∏–∏ –ê—Ä–æ–º–∫–∏", 2, "üíßüí® –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏: –ê—Ä–æ–º–∫–∏"),
            ("–ê–∫—Ü–∏–∏ –°–Ω–µ–∫–∏", 2, "ü•° –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏: –°–Ω–µ–∫–∏"),
            ("–ê–∫—Ü–∏–∏ –ù–∞–ø–∏—Ç–∫–∏", 1, "ü•§ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏: –ù–∞–ø–∏—Ç–∫–∏")
        ]

        any_found = False

        for sheet_name, skip, header in categories:
            rows = get_sheet_data(sheet_name)
            filtered = filter_expired_blocks(rows, reference_date, skip_rows=skip)
            if filtered:
                any_found = True
                await send_combined_blocks(bot, chat_id, filtered, header)

        if not any_found:
            await bot.send_message(chat_id=chat_id, text="‚úÖ –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π –Ω–µ—Ç.")

    except Exception as e:
        await bot.send_message(chat_id=chat_id, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")


def get_local_today():
    return datetime.utcnow().date() + timedelta(hours=3) 

def parse_date_range_simple(period: str):
    try:
        start_str, end_str = period.split("-")
        start = datetime.strptime(start_str.strip(), "%d.%m").date()
        end = datetime.strptime(end_str.strip(), "%d.%m").date()
        current_year = datetime.now().year
        return start.replace(year=current_year), end.replace(year=current_year)
    except:
        try:
            start = datetime.strptime(start_str.strip(), "%d.%m.%y").date()
            end = datetime.strptime(end_str.strip(), "%d.%m.%y").date()
            return start, end
        except:
            return None, None

async def send_formatted_new_offers(bot, chat_id, context):
    from datetime import datetime

    chosen_date_str = context.user_data.get("chosen_date")
    target_date = datetime.strptime(chosen_date_str, "%d.%m.%Y").date() if chosen_date_str else datetime.now().date()

    categories = ["–ê–∫—Ü–∏–∏ –ù–∞–ø–∏—Ç–∫–∏", "–ê–∫—Ü–∏–∏ –°–Ω–µ–∫–∏", "–ê–∫—Ü–∏–∏ –ê—Ä–æ–º–∫–∏"]
    offers = []
    exceptions = []
    exception_addresses = []

    for category in categories:
        rows = get_sheet_data(category)
        for row in rows:
            try:
                if len(row) < 4:
                    continue

                period = row[1].strip()
                start, end = parse_date_range_simple(period)
                if start != target_date:
                    continue

                products = row[2].splitlines() if len(row) > 2 else []
                discount = row[3].strip()

                for product in products:
                    clean_product = ' '.join(product.strip().split())
                    if clean_product:
                        offer_line = f"üçÄ {period.replace(' ', '').replace('-', '‚Äì')} {clean_product} {discount}"
                        offers.append(offer_line)

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π ‚Äî —Ç–æ–ª—å–∫–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–ê–∫—Ü–∏–∏ –ù–∞–ø–∏—Ç–∫–∏"
                if category == "–ê–∫—Ü–∏–∏ –ù–∞–ø–∏—Ç–∫–∏" and len(row) > 5 and row[5].strip().lower() not in ["", "–Ω–µ–º–∞—î", "–Ω–µ—Ç"]:
                    for product in products:
                        clean_product = ' '.join(product.strip().split())
                        if clean_product:
                            exc_line = f"üçÄ {period.replace(' ', '').replace('-', '‚Äì')} {clean_product} {discount}"
                            exceptions.append(exc_line)

                    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å (–≤ –∫–æ–ª–æ–Ω–∫–µ F)
                    exception_addresses += [addr.strip() for addr in row[5].splitlines() if addr.strip()]

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏: {e}")
                continue

    if offers:
        await bot.send_message(chat_id, "üü¢ –ù–û–í–´–ï –ê–ö–¶–ò–ò üü¢\n" + "\n".join(offers))

        if exceptions:
            await bot.send_message(chat_id, "‚ÄºÔ∏è –ï—Å—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –∞–∫—Ü–∏–∏:\n" + "\n".join(exceptions))
            if exception_addresses:
                await bot.send_message(chat_id, "\n".join(exception_addresses))
        else:
            await bot.send_message(chat_id, "‚úÖ –î–ª—è —Ç–µ–∫—É—â–∏—Ö –∞–∫—Ü–∏–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π –Ω–µ—Ç.")
    else:
        await bot.send_message(chat_id, f"üì≠ –ù–æ–≤—ã—Ö –∞–∫—Ü–∏–π –Ω–∞ {target_date.strftime('%d.%m.%Y')} –Ω–µ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")




async def send_formatted_expired_offers(bot, chat_id, context=None):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –¥–∞—Ç—É
    if context and context.user_data.get("chosen_date"):
        try:
            # –ë–µ—Ä–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É –∏ –≤—ã—á–∏—Ç–∞–µ–º 1 –¥–µ–Ω—å
            target_date = datetime.strptime(context.user_data["chosen_date"], "%d.%m.%Y").date() - timedelta(days=1)
            custom_date_mode = True
        except ValueError:
            target_date = datetime.now().date() - timedelta(days=1)
            custom_date_mode = False
    else:
        target_date = datetime.now().date() - timedelta(days=1)
        custom_date_mode = False
    
    categories = ["–ê–∫—Ü–∏–∏ –ù–∞–ø–∏—Ç–∫–∏", "–ê–∫—Ü–∏–∏ –°–Ω–µ–∫–∏", "–ê–∫—Ü–∏–∏ –ê—Ä–æ–º–∫–∏"]
    expired_offers = []
    
    for category in categories:
        rows = get_sheet_data(category)
        for row in rows:
            try:
                if len(row) < 4:
                    continue
                    
                period = row[1].strip() if len(row) > 1 else ""
                if not period:
                    continue
                    
                start_date, end_date = parse_date_range_simple(period)
                
                # –ò—â–µ–º –∞–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≤ target_date (–≤–≤–µ–¥–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ -1 –¥–µ–Ω—å)
                if end_date == target_date:
                    products = row[2].splitlines() if len(row) > 2 else []
                    discount = row[3].strip() if len(row) > 3 else ""
                    
                    for product in products:
                        clean_product = ' '.join(product.strip().split())
                        if clean_product:
                            formatted_period = period.replace(' ', '').replace('-', '‚Äì')
                            offer_line = f"üçÄ {formatted_period} {clean_product} {discount}".strip()
                            expired_offers.append(offer_line)
            
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏: {e}")
                continue

    if expired_offers:
        original_date = (target_date + timedelta(days=1)).strftime('%d.%m.%Y') if custom_date_mode else ""
        message = f"üî¥–ó–ê–ö–û–ù–ß–ò–õ–ê–°–¨ –ê–ö–¶–ò–Øüî¥\n" + "\n".join(expired_offers)
        await bot.send_message(chat_id, message)
    else:
        original_date = (target_date + timedelta(days=1)).strftime('%d.%m.%Y') if custom_date_mode else ""
        if custom_date_mode:
            await bot.send_message(chat_id, f"üì≠ –ü–µ—Ä–µ–¥ {original_date} –Ω–µ –±—ã–ª–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π")
        else:
            await bot.send_message(chat_id, "üì≠ –í—á–µ—Ä–∞ –Ω–µ –±—ã–ª–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π")
