import asyncio
from datetime import datetime, timedelta
from utils.google_sheets import get_sheet_data
from bot.messages import format_block, format_all_blocks


# === –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ ===
async def send_long(bot, chat_id, text, parse_mode="HTML"):
    """
    –î–µ–ª–∏—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –ø–æ —á–∞—Å—Ç—è–º.
    """
    MAX_LENGTH = 4096
    for i in range(0, len(text), MAX_LENGTH):
        await bot.send_message(chat_id=chat_id, text=text[i:i+MAX_LENGTH], parse_mode=parse_mode)


# === –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –±–ª–æ–∫–æ–≤ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º ===
async def send_combined_blocks(bot, chat_id, blocks, header):
    """
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –±–ª–æ–∫–∏ –¥–æ –ª–∏–º–∏—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º.
    """
    combined = header
    messages = []

    for block in blocks:
        if len(combined) + len(block) < 4096:
            combined += block
        else:
            messages.append(combined)
            combined = block
    messages.append(combined)

    await asyncio.sleep(1)  # –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ Telegram API
    for i, msg in enumerate(messages):
        await send_long(bot, chat_id, msg if i == 0 else msg.replace(header, ""))


# === –ê–∫—Ü–∏–∏: –°–Ω–µ–∫–∏ ===
async def send_sneki_full(bot, chat_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –∞–∫—Ü–∏–∏ –∏–∑ –ª–∏—Å—Ç–∞ "–ê–∫—Ü–∏–∏ –°–Ω–µ–∫–∏"
    """
    try:
        rows = get_sheet_data("–ê–∫—Ü–∏–∏ –°–Ω–µ–∫–∏")
        blocks = format_all_blocks(rows, skip_rows=2)
        await send_combined_blocks(bot, chat_id, blocks, "üßæ –ê–∫—Ü–∏—è: –°–Ω–µ–∫–∏\n")
    except Exception as e:
        await bot.send_message(chat_id=chat_id, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫—Ü–∏–π –°–Ω–µ–∫–∏: {e}")


# === –ê–∫—Ü–∏–∏: –ù–∞–ø–∏—Ç–∫–∏ ===
async def send_drinks_full(bot, chat_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –∞–∫—Ü–∏–∏ –∏–∑ –ª–∏—Å—Ç–∞ "–ê–∫—Ü–∏–∏ –ù–∞–ø–∏—Ç–∫–∏"
    """
    try:
        rows = get_sheet_data("–ê–∫—Ü–∏–∏ –ù–∞–ø–∏—Ç–∫–∏")
        blocks = format_all_blocks(rows, skip_rows=1)
        await send_combined_blocks(bot, chat_id, blocks, "ü•§ –ê–∫—Ü–∏—è: –ù–∞–ø–∏—Ç–∫–∏\n")
    except Exception as e:
        await bot.send_message(chat_id=chat_id, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫—Ü–∏–π –ù–∞–ø–∏—Ç–∫–∏: {e}")


# === –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –∞–∫—Ü–∏–π (–ø–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–µ –Ω–∞—á–∞–ª–∞) ===
def filter_today_blocks(rows, skip_rows=1):
    today = datetime.now().strftime('%d.%m')
    blocks = []
    current_block = []

    for row in rows[skip_rows:]:
        if not any(cell.strip() for cell in row):
            if current_block:
                main_row = current_block[0]
                if len(main_row) > 1:
                    period = main_row[1].strip()
                    if '-' in period:
                        start_str = period.split('-')[0].strip()
                        if start_str == today:
                            blocks.append(current_block)
                current_block = []
        else:
            current_block.append(row)

    if current_block:
        main_row = current_block[0]
        if len(main_row) > 1:
            period = main_row[1].strip()
            if '-' in period:
                start_str = period.split('-')[0].strip()
                if start_str == today:
                    blocks.append(current_block)

    return [format_block(b) for b in blocks]


# === –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö –∞–∫—Ü–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ===
async def send_today_offers(bot, chat_id):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –∞–∫—Ü–∏–∏, –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º –¥–Ω—ë–º.
    –ö–∞–∂–¥–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º.
    """
    categories = [
        ("–ê–∫—Ü–∏–∏ –ê—Ä–æ–º–∫–∏", 2, "üíßüí® –ù–æ–≤—ã–µ –∞–∫—Ü–∏–∏: –ê—Ä–æ–º–∫–∏"),
        ("–ê–∫—Ü–∏–∏ –°–Ω–µ–∫–∏", 2, "ü•° –ù–æ–≤—ã–µ –∞–∫—Ü–∏–∏: –°–Ω–µ–∫–∏"),
        ("–ê–∫—Ü–∏–∏ –ù–∞–ø–∏—Ç–∫–∏", 1, "ü•§ –ù–æ–≤—ã–µ –∞–∫—Ü–∏–∏: –ù–∞–ø–∏—Ç–∫–∏")
    ]

    any_found = False

    try:
        for sheet_name, skip_rows, header in categories:
            rows = get_sheet_data(sheet_name)
            filtered_blocks = filter_today_blocks(rows, skip_rows=skip_rows)

            if filtered_blocks:
                any_found = True
                await send_combined_blocks(bot, chat_id, filtered_blocks, header)

        if not any_found:
            await bot.send_message(chat_id=chat_id, text="üìú –ù–æ–≤—ã—Ö –∞–∫—Ü–∏–π –Ω–µ—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
    except Exception as e:
        await bot.send_message(chat_id=chat_id, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∞–∫—Ü–∏–π: {e}")



# === –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π (–≤—á–µ—Ä–∞—à–Ω—è—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è) ===
def filter_expired_blocks(rows, skip_rows=1):
    today = datetime.now().date()
    blocks = []
    current_block = []

    def parse_date_range(period_str):
        try:
            _, end_str = period_str.split('-')
            end_str = end_str.strip()
            parsed = datetime.strptime(end_str, '%d.%m').date()
            return parsed.replace(year=today.year)
        except:
            return None

    for row in rows[skip_rows:]:
        if not any(cell.strip() for cell in row):
            if current_block:
                main_row = current_block[0]
                if len(main_row) > 1:
                    end_date = parse_date_range(main_row[1])
                    if end_date and end_date == (today - timedelta(days=1)):
                        blocks.append(current_block)
                current_block = []
        else:
            current_block.append(row)

    if current_block:
        main_row = current_block[0]
        if len(main_row) > 1:
            end_date = parse_date_range(main_row[1])
            if end_date and end_date == (today - timedelta(days=1)):
                blocks.append(current_block)

    return [format_block(b) for b in blocks]


# === –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π (–≤—á–µ—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å) ===
async def send_expired_offers(bot, chat_id):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –≤—á–µ—Ä–∞.
    """
    try:
        categories = [
            ("–ê–∫—Ü–∏–∏ –ê—Ä–æ–º–∫–∏", 2, "üíßüí® –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏: –ê—Ä–æ–º–∫–∏"),
            ("–ê–∫—Ü–∏–∏ –°–Ω–µ–∫–∏", 2, "üì¥ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏: –°–Ω–µ–∫–∏"),
            ("–ê–∫—Ü–∏–∏ –ù–∞–ø–∏—Ç–∫–∏", 1, "ü•§ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏: –ù–∞–ø–∏—Ç–∫–∏")
        ]

        any_found = False
        for sheet_name, skip, header in categories:
            rows = get_sheet_data(sheet_name)
            filtered = filter_expired_blocks(rows, skip_rows=skip)
            if filtered:
                any_found = True
                await send_combined_blocks(bot, chat_id, filtered, header)

        if not any_found:
            await bot.send_message(chat_id=chat_id, text="‚úÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –≤—Å–µ –∞–∫—Ü–∏–∏ –µ—â—ë –¥–µ–π—Å—Ç–≤—É—é—Ç.")
    except Exception as e:
        await bot.send_message(chat_id=chat_id, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π: {e}")


def filter_blocks_by_start_date(rows, target_date, skip_rows=1):
    blocks = []
    current_block = []
    for row in rows[skip_rows:]:
        if not any(cell.strip() for cell in row):
            if current_block:
                main_row = current_block[0]
                if len(main_row) > 1:
                    period = main_row[1].strip()
                    if '-' in period:
                        start_str = period.split('-')[0].strip()
                        if start_str == target_date:
                            blocks.append(current_block)
                current_block = []
        else:
            current_block.append(row)
    if current_block:
        main_row = current_block[0]
        if len(main_row) > 1:
            period = main_row[1].strip()
            if '-' in period:
                start_str = period.split('-')[0].strip()
                if start_str == target_date:
                    blocks.append(current_block)
    return [format_block(b) for b in blocks]

def filter_blocks_by_end_date(rows, target_date, skip_rows=1):
    blocks = []
    current_block = []

    try:
        target_date_obj = datetime.strptime(target_date, "%d.%m").date()
    except ValueError:
        return []

    def parse_end_date(period_str):
        try:
            _, end_str = period_str.split('-')
            end_date = datetime.strptime(end_str.strip(), "%d.%m").date()
            return end_date.replace(year=target_date_obj.year)
        except:
            return None

    for row in rows[skip_rows:]:
        if not any(cell.strip() for cell in row):
            if current_block:
                main_row = current_block[0]
                if len(main_row) > 1:
                    end_date = parse_end_date(main_row[1])
                    if end_date == (target_date_obj - timedelta(days=1)):
                        blocks.append(current_block)
                current_block = []
        else:
            current_block.append(row)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–ª–æ–∫–∞
    if current_block:
        main_row = current_block[0]
        if len(main_row) > 1:
            end_date = parse_end_date(main_row[1])
            if end_date == (target_date_obj - timedelta(days=1)):
                blocks.append(current_block)

    return [format_block(b) for b in blocks]


async def send_new_offers_by_date(bot, chat_id, target_date):
    categories = [
        ("–ê–∫—Ü–∏–∏ –ê—Ä–æ–º–∫–∏", 2, "üíßüí® –ù–æ–≤—ã–µ –∞–∫—Ü–∏–∏: –ê—Ä–æ–º–∫–∏"),
        ("–ê–∫—Ü–∏–∏ –°–Ω–µ–∫–∏", 2, "ü•° –ù–æ–≤—ã–µ –∞–∫—Ü–∏–∏: –°–Ω–µ–∫–∏"),
        ("–ê–∫—Ü–∏–∏ –ù–∞–ø–∏—Ç–∫–∏", 1, "ü•§ –ù–æ–≤—ã–µ –∞–∫—Ü–∏–∏: –ù–∞–ø–∏—Ç–∫–∏")
    ]
    any_found = False
    for name, skip, header in categories:
        rows = get_sheet_data(name)
        filtered = filter_blocks_by_start_date(rows, target_date, skip_rows=skip)
        if filtered:
            any_found = True
            await send_combined_blocks(bot, chat_id, filtered, header)

    if not any_found:
        await bot.send_message(chat_id=chat_id, text="üì≠ –ù–æ–≤—ã—Ö –∞–∫—Ü–∏–π –Ω–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç.")

async def send_expired_offers_by_date(bot, chat_id, target_date):
    categories = [
        ("–ê–∫—Ü–∏–∏ –ê—Ä–æ–º–∫–∏", 2, "üíßüí® –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏: –ê—Ä–æ–º–∫–∏"),
        ("–ê–∫—Ü–∏–∏ –°–Ω–µ–∫–∏", 2, "ü•° –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏: –°–Ω–µ–∫–∏"),
        ("–ê–∫—Ü–∏–∏ –ù–∞–ø–∏—Ç–∫–∏", 1, "ü•§ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏: –ù–∞–ø–∏—Ç–∫–∏")
    ]
    any_found = False
    for name, skip, header in categories:
        rows = get_sheet_data(name)
        filtered = filter_blocks_by_end_date(rows, target_date, skip_rows=skip)
        if filtered:
            any_found = True
            await send_combined_blocks(bot, chat_id, filtered, header)

    if not any_found:
        await bot.send_message(chat_id=chat_id, text="‚úÖ –ù–∞ —ç—Ç—É –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π –Ω–µ—Ç.")