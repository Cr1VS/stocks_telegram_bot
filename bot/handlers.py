from telegram.ext import ContextTypes
from telegram import Update, ReplyKeyboardMarkup, Bot
from datetime import datetime


# –ò–º–ø–æ—Ä—Ç –ª–æ–≥–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫
from bot.logic import (
    send_sneki_full,
    send_drinks_full,
    send_today_offers,
    send_expired_offers,
    send_long,
    send_combined_blocks,
    send_new_offers_by_date, 
    send_expired_offers_by_date,
    send_formatted_new_offers,
    send_formatted_expired_offers,
)
from bot.admin_commands import (
    stats_command,
    last_users_command,
    log_command,
    version_command
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞
from bot.config import ALLOWED_USERS, ADMIN_ID, BLOCKED_USERS


# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
from utils.stats import update_stats
from utils.logger import log_user_activity, log_new_user, log_user_action_to_personal_file


# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è "–ê—Ä–æ–º–æ–∫"
from bot.messages import format_aromki_message
from utils.google_sheets import get_sheet_data


# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if update.message:
        # –ë–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard = [
            ["ü•§ –ê–∫—Ü–∏–∏ –ù–∞–ø–∏—Ç–∫–∏", "ü•° –ê–∫—Ü–∏–∏ –°–Ω–µ–∫–∏"],
            ["üíßüí® –ê–∫—Ü–∏–∏ –ê—Ä–æ–º–∫–∏", "üì¶ –í—Å–µ –∞–∫—Ü–∏–∏"],
            ["üÜï –ù–æ–≤—ã–µ –∞–∫—Ü–∏–∏", "üì¥ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏"],
            ["üü¢ –ù–æ–≤—ã–µ –∞–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏", "üî¥ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"]
        ]


        # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω-–∫–Ω–æ–ø–∫–∏
        if user_id == ADMIN_ID:
            keyboard.append(["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üßæ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"])
            keyboard.append(["üìÅ –õ–æ–≥–∏", "‚ÑπÔ∏è –í–µ—Ä—Å–∏—è –±–æ—Ç–∞"])

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)



# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ user_id ===
def is_blocked(user_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
    """
    return int(user_id) in BLOCKED_USERS


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20.06) ===
from datetime import datetime

async def handle_date_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.strip()
    today_year = datetime.now().year

    # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞—Ç—É –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
    parsed_date = None
    formats = [
        ("%d.%m", lambda dt: dt.replace(year=today_year)),
        ("%d-%m", lambda dt: dt.replace(year=today_year)),
        ("%d.%m.%y", lambda dt: dt),
        ("%d-%m-%y", lambda dt: dt),
        ("%d.%m.%Y", lambda dt: dt),
        ("%d-%m-%Y", lambda dt: dt),
    ]

    for fmt, adjust_func in formats:
        try:
            dt = datetime.strptime(user_input, fmt)
            dt = adjust_func(dt)
            parsed_date = dt
            break
        except ValueError:
            continue

    if parsed_date:
        context.user_data["chosen_date"] = parsed_date.strftime("%d.%m.%Y")

        keyboard = [
            ["üÜï –ù–æ–≤—ã–µ –∞–∫—Ü–∏–∏ –Ω–∞ –¥–∞—Ç—É", "üì¥ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏ –Ω–∞ –¥–∞—Ç—É"],
            ["üü¢ –ù–æ–≤—ã–µ –∞–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏", "üî¥ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"],
            ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
    ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            f"üìÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {parsed_date.strftime('%d.%m.%Y')}\n–ß—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å?",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú, –î–î-–ú–ú –∏–ª–∏ –î–î-–ú–ú-–ì–ì(–ì–ì)")



# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        user_id = user.id
        text = update.message.text.strip()

        # –õ–æ–≥–≥–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        log_new_user({
            "id": user.id,
            "username": user.username,
            "first_name": user.first_name,
            "last_name": user.last_name
        })
        update_stats(user.id, user.username, text)

        # –õ–æ–≥–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è
        log_user_activity({
            "id": user.id,
            "username": user.username,
            "first_name": user.first_name,
            "last_name": user.last_name
        }, text)

        # –õ–æ–≥–≥–∏—Ä—É–µ–º –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ª–æ–≥
        await log_user_action_to_personal_file({
            "id": user.id,
            "username": user.username,
            "first_name": user.first_name,
            "last_name": user.last_name
        }, text)

        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞
        if is_blocked(user_id):
            await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return

        # === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ ===
        if text == "ü•§ –ê–∫—Ü–∏–∏ –ù–∞–ø–∏—Ç–∫–∏":
            await send_drinks_full(context.bot, update.effective_chat.id)
            await log_user_action_to_personal_file(
                user_data=update.effective_user.to_dict(),
                action=update.message.text,
                bot=context.bot  # ‚úÖ –±–µ—Ä—ë–º bot –∏–∑ context
            )

        elif text == "ü•° –ê–∫—Ü–∏–∏ –°–Ω–µ–∫–∏":
            await send_sneki_full(context.bot, update.effective_chat.id)
            await log_user_action_to_personal_file(
                user_data=update.effective_user.to_dict(),
                action=update.message.text,
                bot=context.bot  # ‚úÖ –±–µ—Ä—ë–º bot –∏–∑ context
            )

        elif text == "üíßüí® –ê–∫—Ü–∏–∏ –ê—Ä–æ–º–∫–∏":
            aromki_rows = get_sheet_data("–ê–∫—Ü–∏–∏ –ê—Ä–æ–º–∫–∏")
            msg = format_aromki_message(aromki_rows)
            await send_long(context.bot, update.effective_chat.id, msg)
            await log_user_action_to_personal_file(
                user_data=update.effective_user.to_dict(),
                action=update.message.text,
                bot=context.bot  # ‚úÖ –±–µ—Ä—ë–º bot –∏–∑ context
            )

        elif text == "üì¶ –í—Å–µ –∞–∫—Ü–∏–∏":
            aromki_rows = get_sheet_data("–ê–∫—Ü–∏–∏ –ê—Ä–æ–º–∫–∏")
            msg = format_aromki_message(aromki_rows)
            await send_long(context.bot, update.effective_chat.id, msg)
            await send_sneki_full(context.bot, update.effective_chat.id)
            await send_drinks_full(context.bot, update.effective_chat.id)
            await log_user_action_to_personal_file(
                user_data=update.effective_user.to_dict(),
                action=update.message.text,
                bot=context.bot  # ‚úÖ –±–µ—Ä—ë–º bot –∏–∑ context
            )
        elif text == "üü¢ –ù–æ–≤—ã–µ –∞–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏":
            await send_formatted_new_offers(context.bot, update.effective_chat.id, context)
            await log_user_action_to_personal_file(
                user_data=update.effective_user.to_dict(),
                action=update.message.text,
                bot=context.bot  # ‚úÖ –±–µ—Ä—ë–º bot –∏–∑ context
            )

        elif text == "üî¥ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏":
            await send_formatted_expired_offers(context.bot, update.effective_chat.id, context)
            await log_user_action_to_personal_file(
                user_data=update.effective_user.to_dict(),
                action=update.message.text,
                bot=context.bot  # ‚úÖ –±–µ—Ä—ë–º bot –∏–∑ context
            )

        elif text == "üÜï –ù–æ–≤—ã–µ –∞–∫—Ü–∏–∏":
            await send_today_offers(context.bot, update.effective_chat.id)
            await log_user_action_to_personal_file(
                user_data=update.effective_user.to_dict(),
                action=update.message.text,
                bot=context.bot  # ‚úÖ –±–µ—Ä—ë–º bot –∏–∑ context
            )

        elif text == "üì¥ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏":
            await send_expired_offers(context.bot, update.effective_chat.id)
            await log_user_action_to_personal_file(
                user_data=update.effective_user.to_dict(),
                action=update.message.text,
                bot=context.bot  # ‚úÖ –±–µ—Ä—ë–º bot –∏–∑ context
            )

        elif text == "üÜï –ù–æ–≤—ã–µ –∞–∫—Ü–∏–∏ –Ω–∞ –¥–∞—Ç—É":
            date = context.user_data.get("chosen_date")
            if date:
                await send_new_offers_by_date(context.bot, update.effective_chat.id, date)
                await log_user_action_to_personal_file(
                    user_data=update.effective_user.to_dict(),
                    action=update.message.text,
                    bot=context.bot  # ‚úÖ –±–µ—Ä—ë–º bot –∏–∑ context
                )
            else:
                await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.")

        elif text == "üì¥ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏ –Ω–∞ –¥–∞—Ç—É":
            date = context.user_data.get("chosen_date")
            if date:
                await send_expired_offers_by_date(context.bot, update.effective_chat.id, date)
                await log_user_action_to_personal_file(
                    user_data=update.effective_user.to_dict(),
                    action=update.message.text,
                    bot=context.bot  # ‚úÖ –±–µ—Ä—ë–º bot –∏–∑ context
                )
            else:
                await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.")

        elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            await start(update, context)

        elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            await stats_command(update, context)

        elif text == "üßæ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
            await last_users_command(update, context)

        elif text == "üìÅ –õ–æ–≥–∏":
            await log_command(update, context)

        elif text == "‚ÑπÔ∏è –í–µ—Ä—Å–∏—è –±–æ—Ç–∞":
            await version_command(update, context)

        elif any(sep in text for sep in [".", "-"]) and any(char.isdigit() for char in text):
            await handle_date_input(update, context)

        else:
            await update.message.reply_text("ü§ñ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ –º–µ–Ω—é.")

    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


