import logging
from pathlib import Path
from datetime import datetime 
from dotenv import load_dotenv
import os
from telegram import Bot

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))  # –∏–∑ .env
NOTIFY_USER_ID = int(os.getenv("NOTIFY_USER_ID"))  
# === –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ logs, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç ===
Path("logs").mkdir(parents=True, exist_ok=True)


# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ===
logging.basicConfig(
    filename="logs/user_activity.log",  # –§–∞–π–ª –¥–ª—è –ª–æ–≥–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    level=logging.INFO,                 # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    format="%(asctime)s | %(message)s", # –§–æ—Ä–º–∞—Ç: –≤—Ä–µ–º—è + —Å–æ–æ–±—â–µ–Ω–∏–µ
    encoding="utf-8"                    # –ö–æ–¥–∏—Ä–æ–≤–∫–∞
)


def log_user_activity(user_data: dict, action: str):
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–∏.

    :param user_data: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
    :param action: —Å—Ç—Ä–æ–∫–∞, –æ–ø–∏—Å—ã–≤–∞—é—â–∞—è –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–ª—é—á–µ–π
        user_id = user_data.get("id", "unknown")
        username = user_data.get("username", "‚Äî")
        first_name = user_data.get("first_name", "")
        last_name = user_data.get("last_name", "")

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞
        message = (
            f"UserID: {user_id} | "
            f"Username: @{username} | "
            f"Name: {first_name} {last_name} | "
            f"Action: {action}"
        )

        # –ó–∞–ø–∏—Å—å –≤ –ª–æ–≥
        logging.info(message)


    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –ª–æ–≥–≥–µ—Ä–∞ (–≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π log —Ñ–∞–π–ª –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")


def log_new_user(user_data: dict):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ –∑–∞–ø–∏—Å–∞–Ω.
    """
    try:
        user_id = str(user_data.get("id", "unknown"))
        username = user_data.get("username", "‚Äî")
        first_name = user_data.get("first_name", "")
        last_name = user_data.get("last_name", "")

        # –ü—É—Ç—å –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_list_path = Path("logs/users_list.log")
        user_list_path.touch(exist_ok=True)

        with user_list_path.open("r", encoding="utf-8") as f:
            existing = f.read()

        # –ï—Å–ª–∏ ID —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ ‚Äî –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º
        if user_id in existing:
            return

        # –ù–æ–º–µ—Ä –ø–æ –ø–æ—Ä—è–¥–∫—É
        count = existing.strip().count("UserID:") + 1

        entry = (
            f"#{count}\n"
            f"UserID: {user_id}\n"
            f"Username: @{username}\n"
            f"Name: {first_name} {last_name}\n"
            f"{'-'*30}\n"
        )

        with user_list_path.open("a", encoding="utf-8") as f:
            f.write(entry)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")


async def log_user_action_to_personal_file(user_data: dict, action: str, bot=None):
    try:
        user_id = int(user_data.get("id", 0))
        username = user_data.get("username", "‚Äî")
        first_name = user_data.get("first_name", "")
        last_name = user_data.get("last_name", "")

        log_line = (
            f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | "
            f"{first_name} {last_name} (@{username}) | {action}"
        )

        # üìÅ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ª–æ–≥
        personal_log_path = Path(f"logs/user_{user_id}.log")
        personal_log_path.parent.mkdir(parents=True, exist_ok=True)
        with personal_log_path.open("a", encoding="utf-8") as f:
            f.write(log_line + "\n")

        # ‚úÖ –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞, –¢–û–õ–¨–ö–û –µ—Å–ª–∏:
        # - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö
        # - –∏ —ç—Ç–æ –ù–ï —Å–∞–º –∞–¥–º–∏–Ω
        if bot and user_id != ADMIN_ID and user_id == NOTIFY_USER_ID:
            await bot.send_message(chat_id=ADMIN_ID, text=log_line)

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")